{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Git Clone File\\\\Call-Center-App\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Login from './components/Login';\nimport Dashboard from './components/Dashboard';\nimport AddAgentModal from './components/Modals/AddAgentModal';\nimport EditAgentModal from './components/Modals/EditAgentModal';\nimport AltNumbersModal from './components/Modals/AltNumbersModal';\nimport ViewAllCallsModal from './components/Modals/ViewAllCallsModal';\nimport useAuth from './hooks/useAuth';\nimport useAgents from './hooks/useAgents';\nimport useCalls from './hooks/useCalls';\nimport { exportToExcel, exportToPDF, exportToCSV, exportToXML } from './utils/exportHelpers';\nimport { formatDuration, callStatusClass } from './utils/format';\nimport { handleSaveAltNumbers, handleSaveViewAllRemarks, fetchCompanyInfo } from './utils/api';\nimport CompanyBlockedOverlay from './components/CompanyBlockedOverlay';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Auth\n  const {\n    user,\n    loginData,\n    setLoginData,\n    handleLogin,\n    handleLogout,\n    loading,\n    error,\n    setError\n  } = useAuth();\n\n  // UI States\n  const [currentScreen, setCurrentScreen] = useState('login');\n  const [activeTab, setActiveTab] = useState('calls');\n  const [callSearch, setCallSearch] = useState('');\n  const [agentSearch, setAgentSearch] = useState('');\n  const [fromDate, setFromDate] = useState('');\n  const [toDate, setToDate] = useState('');\n  const [showCallExport, setShowCallExport] = useState(false);\n  const [showAgentExport, setShowAgentExport] = useState(false);\n  const [blockedMessage, setBlockedMessage] = useState('');\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [formData, setFormData] = useState({\n    agent_number: '',\n    name: '',\n    email: '',\n    password: '',\n    status: 'Active',\n    is_admin: false\n  });\n  const [manualCallNumber, setManualCallNumber] = useState('');\n  const [viewCustomer, setViewCustomer] = useState(null);\n  const [viewAllRemarksEdit, setViewAllRemarksEdit] = useState(false);\n  const [viewAllRemarksInput, setViewAllRemarksInput] = useState('');\n  const [viewAllRemarksLoading, setViewAllRemarksLoading] = useState(false);\n  const [altModal, setAltModal] = useState(false);\n  const [selectedCall, setSelectedCall] = useState(null);\n  const [altNumbersInput, setAltNumbersInput] = useState('');\n  const [altNumbersLoading, setAltNumbersLoading] = useState(false);\n  const [company, setCompany] = useState(null); // Add company state\n\n  // Agents\n  const {\n    agentDetails,\n    fetchAgentDetails,\n    handleAddAgent,\n    handleEditAgent,\n    handleDeleteAgent,\n    deleteLoading\n  } = useAgents();\n\n  // Calls\n  const {\n    callDetails,\n    fetchCallDetails,\n    editingCallId,\n    setEditingCallId,\n    editInputs,\n    setEditInputs,\n    editLoading,\n    handleEditCall,\n    handleCancelEdit,\n    handleUpdateCall\n  } = useCalls();\n  const userRoleIsAdmin = user === null || user === void 0 ? void 0 : user.is_admin;\n  const token = localStorage.getItem('token');\n  const handleDateSearch = () => {\n    fetchCallDetails(token, fromDate, toDate);\n  };\n  const refreshCalls = () => {\n    fetchCallDetails(token, fromDate, toDate);\n  };\n  const openEditModal = agent => {\n    setFormData(agent);\n    setShowEditModal(true);\n  };\n  const handleManualCall = () => {\n    if (!manualCallNumber) return alert(\"Enter a number\");\n    alert(`Pretend calling ${manualCallNumber}`);\n  };\n  const handleOpenAltNumbersModal = call => {\n    setSelectedCall(call);\n    setAltNumbersInput(call.alternative_numbers || '');\n    setAltModal(true);\n  };\n  const handleSaveAltNumbersWrapper = async () => {\n    setAltNumbersLoading(true);\n    const res = await handleSaveAltNumbers(selectedCall.id, altNumbersInput, token);\n    if (res.success) {\n      await fetchCallDetails(token, fromDate, toDate);\n      setAltModal(false);\n    }\n    setAltNumbersLoading(false);\n  };\n  const handleViewCustomerCalls = customerNumber => {\n    const customerCalls = filteredCalls.filter(call => call.customer_number === customerNumber);\n    const enrichedCustomer = {\n      number: customerNumber,\n      calls: customerCalls.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)) // latest first\n    };\n    setViewCustomer(enrichedCustomer);\n    setViewAllRemarksEdit(false);\n    setViewAllRemarksInput('');\n  };\n  const handleViewAllRemarksEdit = () => {\n    const remarks = customerMostRecentRemark(viewCustomer);\n    const cleanRemarks = removeTimestampsAndTags('');\n    setViewAllRemarksInput(cleanRemarks);\n    setViewAllRemarksEdit(true);\n  };\n  const removeTimestampsAndTags = text => {\n    return text.replace(/<[^>]*>/g, '') // remove HTML tags\n    .replace(/\\[\\d{2}\\/\\d{2}\\/\\d{4} \\d{2}:\\d{2}:\\d{2}\\]/g, '') // remove [DD/MM/YYYY HH:MM:SS]\n    .trim();\n  };\n  const customerMostRecentRemark = customer => {\n    var _customer$calls;\n    const mostRecentCall = customer === null || customer === void 0 ? void 0 : (_customer$calls = customer.calls) === null || _customer$calls === void 0 ? void 0 : _customer$calls[0];\n    return (mostRecentCall === null || mostRecentCall === void 0 ? void 0 : mostRecentCall.remarks) || '';\n  };\n  const handleSaveViewAllRemarksWrapper = async () => {\n    var _viewCustomer$calls, _viewCustomer$calls$;\n    if (!(viewCustomer !== null && viewCustomer !== void 0 && (_viewCustomer$calls = viewCustomer.calls) !== null && _viewCustomer$calls !== void 0 && _viewCustomer$calls[0])) return;\n    setViewAllRemarksLoading(true);\n    const timestamp = new Date().toLocaleString('en-GB'); // dd/mm/yyyy hh:mm:ss\n    const newFormattedRemark = `${viewAllRemarksInput.trim()} <span style='font-size:10px;color:gray;'>[${timestamp}]</span>`;\n    const oldRemarks = ((_viewCustomer$calls$ = viewCustomer.calls[0]) === null || _viewCustomer$calls$ === void 0 ? void 0 : _viewCustomer$calls$.remarks) || '';\n    const updatedRemarks = `${newFormattedRemark}<br/>${oldRemarks}`;\n    const callId = viewCustomer.calls[0].id;\n    const res = await handleSaveViewAllRemarks(callId, {\n      remarks: updatedRemarks\n    }, token);\n    if (res.success) {\n      // ✅ Update locally — so UI shows updated immediately\n      const updatedCalls = viewCustomer.calls.map(call => call.id === callId ? {\n        ...call,\n        remarks: updatedRemarks\n      } : call);\n      setViewCustomer(prev => ({\n        ...prev,\n        calls: updatedCalls\n      }));\n      setViewAllRemarksEdit(false);\n      setViewAllRemarksInput('');\n    }\n    setViewAllRemarksLoading(false);\n  };\n  const tabClass = key => `py-3 px-4 text-sm font-medium border-b-2 ${activeTab === key ? 'border-blue-500 text-blue-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'}`;\n  const fetchCompanyInfoWithToken = async token => {\n    try {\n      const companyData = await fetchCompanyInfo(token);\n      setCompany(companyData); // Update company state\n      // Check for fully blocked statuses: 'Fully Close' or 'Unpaid'\n      if (companyData && (companyData.status === 'Fully Close' || companyData.payment_status === 'Unpaid')) {\n        const msg = 'Your services are stopped. Please contact the sales person.';\n        setBlockedMessage(msg);\n        console.log('Company is FULLY blocked, blockedMessage set to:', msg, 'Company status:', companyData.status, 'Payment status:', companyData.payment_status);\n        return; // do not fetch data and show full overlay\n      }\n      setBlockedMessage('');\n      console.log('Company is NOT FULLY blocked, blockedMessage set to empty.', 'Company status:', companyData === null || companyData === void 0 ? void 0 : companyData.status, 'Payment status:', companyData === null || companyData === void 0 ? void 0 : companyData.payment_status);\n      fetchCallDetails(token);\n      fetchAgentDetails(token);\n    } catch (err) {\n      console.error(\"Failed to fetch company info or other data:\", err);\n      setError(\"Failed to load company data.\");\n    }\n  };\n  useEffect(() => {\n    if (user && token) {\n      setCurrentScreen('dashboard');\n      fetchCompanyInfoWithToken(token);\n    }\n  }, [user, token]);\n  if (currentScreen === 'login') {\n    return /*#__PURE__*/_jsxDEV(Login, {\n      loginData: loginData,\n      setLoginData: setLoginData,\n      handleLogin: handleLogin,\n      loading: loading,\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this);\n  }\n  if (blockedMessage) {\n    return /*#__PURE__*/_jsxDEV(CompanyBlockedOverlay, {\n      message: blockedMessage,\n      onLogout: () => {\n        handleLogout();\n        setCompany(null);\n        setCallDetails([]);\n        setAgentDetails([]);\n        setBlockedMessage('');\n        setLoginData({\n          userId: '',\n          password: ''\n        });\n        setManualCallNumber('');\n        setViewCustomer(null);\n        setAltModal(false);\n        setSelectedCall(null);\n        setActiveTab('calls');\n        setCallSearch('');\n        setAgentSearch('');\n        setFromDate('');\n        setToDate('');\n        setShowCallExport(false);\n        setShowAgentExport(false);\n        setShowAddModal(false);\n        setShowEditModal(false);\n        setFormData({\n          agent_number: '',\n          name: '',\n          email: '',\n          password: '',\n          status: 'Active',\n          is_admin: false\n        });\n        setEditingCallId(null);\n        setEditInputs({});\n        setViewAllRemarksEdit(false);\n        setViewAllRemarksInput('');\n        setViewAllRemarksLoading(false);\n        setAltNumbersInput('');\n        setAltNumbersLoading('');\n        setCurrentScreen('login');\n      },\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this);\n  }\n  const filteredCalls = callDetails.filter(call => {\n    const query = (callSearch || '').trim().toLowerCase();\n    if (!query) return true;\n    const hasMeeting = Boolean(call.meeting_datetime || call.meeting_description && call.meeting_description.trim());\n    // If the user searches for 'meeting' (or similar), only show calls that have meeting info\n    if (['meeting', 'meetings', 'meet'].includes(query)) {\n      return hasMeeting;\n    }\n    const fields = [call.customer_number || '', call.agent_number || '', (call.name || '').replace(/<[^>]*>/g, ''), (call.remarks || '').replace(/<[^>]*>/g, ''), call.meeting_description || '', call.meeting_datetime ? new Date(call.meeting_datetime).toLocaleString() : ''];\n    return fields.join(' ').toLowerCase().includes(query);\n  });\n  const filteredAgents = agentDetails.filter(agent => {\n    var _agent$name;\n    return (_agent$name = agent.name) === null || _agent$name === void 0 ? void 0 : _agent$name.toLowerCase().includes(agentSearch.toLowerCase());\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Dashboard, {\n      user: user,\n      handleLogout: () => {\n        handleLogout(); // Call useAuth's logout to clear token and user from localStorage\n        setCompany(null);\n        setCallDetails([]);\n        setAgentDetails([]);\n        setBlockedMessage('');\n        setLoginData({\n          userId: '',\n          password: ''\n        });\n        setManualCallNumber('');\n        setViewCustomer(null);\n        setAltModal(false);\n        setSelectedCall(null);\n        setActiveTab('calls'); // Reset active tab to default\n        setCallSearch('');\n        setAgentSearch('');\n        setFromDate('');\n        setToDate('');\n        setShowCallExport(false);\n        setShowAgentExport(false);\n        setShowAddModal(false);\n        setShowEditModal(false);\n        setFormData({\n          agent_number: '',\n          name: '',\n          email: '',\n          password: '',\n          status: 'Active',\n          is_admin: false\n        });\n        setEditingCallId(null);\n        setEditInputs({});\n        setViewAllRemarksEdit(false);\n        setViewAllRemarksInput('');\n        setViewAllRemarksLoading(false);\n        setAltNumbersInput('');\n        setAltNumbersLoading('');\n        setCurrentScreen('login');\n        // Add any other states that need resetting\n      },\n      activeTab: activeTab,\n      setActiveTab: setActiveTab,\n      tabClass: tabClass,\n      refreshCalls: refreshCalls,\n      callSearch: callSearch,\n      setCallSearch: setCallSearch,\n      agentSearch: agentSearch,\n      setAgentSearch: setAgentSearch,\n      fromDate: fromDate,\n      setFromDate: setFromDate,\n      toDate: toDate,\n      setToDate: setToDate,\n      handleDateSearch: handleDateSearch,\n      showCallExport: showCallExport,\n      setShowCallExport: setShowCallExport,\n      showAgentExport: showAgentExport,\n      setShowAgentExport: setShowAgentExport,\n      filteredCalls: filteredCalls,\n      filteredAgents: filteredAgents,\n      exportToExcel: exportToExcel,\n      exportToPDF: exportToPDF,\n      exportToCSV: exportToCSV,\n      exportToXML: exportToXML,\n      setShowAddModal: setShowAddModal,\n      setFormData: setFormData,\n      setError: setError,\n      userRoleIsAdmin: userRoleIsAdmin,\n      editingCallId: editingCallId,\n      editInputs: editInputs,\n      setEditInputs: setEditInputs,\n      handleEditCall: handleEditCall,\n      handleCancelEdit: handleCancelEdit,\n      handleUpdateCall: id => handleUpdateCall(id, token),\n      editLoading: editLoading,\n      formatDuration: formatDuration,\n      callStatusClass: callStatusClass,\n      handleViewCustomerCalls: handleViewCustomerCalls,\n      handleOpenAltNumbersModal: handleOpenAltNumbersModal,\n      callDetails: callDetails,\n      openEditModal: openEditModal,\n      handleDeleteAgent: agentNum => handleDeleteAgent(agentNum, token),\n      deleteLoading: deleteLoading,\n      showAddModal: showAddModal,\n      showEditModal: showEditModal,\n      formData: formData,\n      setShowEditModal: setShowEditModal,\n      handleAddAgent: (data, onSuccess, onError, setLoading) => handleAddAgent(data, token, onSuccess, onError, setLoading),\n      handleEditAgent: (data, onSuccess, onError, setLoading) => handleEditAgent(data, token, onSuccess, onError, setLoading),\n      loading: loading,\n      error: error,\n      manualCallNumber: manualCallNumber,\n      setManualCallNumber: setManualCallNumber,\n      handleManualCall: handleManualCall,\n      isBlocked: !!((company === null || company === void 0 ? void 0 : company.status) === 'Fully Close' || (company === null || company === void 0 ? void 0 : company.status) === 'Partially Close' || (company === null || company === void 0 ? void 0 : company.payment_status) === 'Unpaid')\n      // Pass the company object to Dashboard so it can pass to CompanyExportGuard\n      ,\n      company: company\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddAgentModal, {\n      show: showAddModal,\n      onClose: () => setShowAddModal(false),\n      formData: formData,\n      setFormData: setFormData,\n      handleAddAgent: e => {\n        e.preventDefault();\n        handleAddAgent(formData, token, () => setShowAddModal(false), setError, () => {});\n      },\n      loading: loading,\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EditAgentModal, {\n      show: showEditModal,\n      onClose: () => setShowEditModal(false),\n      formData: formData,\n      setFormData: setFormData,\n      handleEditAgent: e => {\n        e.preventDefault();\n        handleEditAgent(formData, token, () => setShowEditModal(false), setError, () => {});\n      },\n      loading: loading,\n      error: error,\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AltNumbersModal, {\n      show: altModal,\n      onClose: () => setAltModal(false),\n      selectedCall: selectedCall,\n      altNumbersInput: altNumbersInput,\n      setAltNumbersInput: setAltNumbersInput,\n      handleSaveAltNumbers: handleSaveAltNumbersWrapper,\n      altNumbersLoading: altNumbersLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ViewAllCallsModal, {\n      show: !!viewCustomer,\n      onClose: () => setViewCustomer(null),\n      viewCustomer: viewCustomer,\n      viewAllRemarksEdit: viewAllRemarksEdit,\n      viewAllRemarksInput: viewAllRemarksInput,\n      setViewAllRemarksInput: setViewAllRemarksInput,\n      handleViewAllRemarksEdit: handleViewAllRemarksEdit,\n      handleSaveViewAllRemarks: handleSaveViewAllRemarksWrapper,\n      viewAllRemarksLoading: viewAllRemarksLoading,\n      setViewAllRemarksEdit: setViewAllRemarksEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"qI2bYP2Ygnas8xSNMU4GooDgiBo=\", false, function () {\n  return [useAuth, useAgents, useCalls];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Login","Dashboard","AddAgentModal","EditAgentModal","AltNumbersModal","ViewAllCallsModal","useAuth","useAgents","useCalls","exportToExcel","exportToPDF","exportToCSV","exportToXML","formatDuration","callStatusClass","handleSaveAltNumbers","handleSaveViewAllRemarks","fetchCompanyInfo","CompanyBlockedOverlay","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","user","loginData","setLoginData","handleLogin","handleLogout","loading","error","setError","currentScreen","setCurrentScreen","activeTab","setActiveTab","callSearch","setCallSearch","agentSearch","setAgentSearch","fromDate","setFromDate","toDate","setToDate","showCallExport","setShowCallExport","showAgentExport","setShowAgentExport","blockedMessage","setBlockedMessage","showAddModal","setShowAddModal","showEditModal","setShowEditModal","formData","setFormData","agent_number","name","email","password","status","is_admin","manualCallNumber","setManualCallNumber","viewCustomer","setViewCustomer","viewAllRemarksEdit","setViewAllRemarksEdit","viewAllRemarksInput","setViewAllRemarksInput","viewAllRemarksLoading","setViewAllRemarksLoading","altModal","setAltModal","selectedCall","setSelectedCall","altNumbersInput","setAltNumbersInput","altNumbersLoading","setAltNumbersLoading","company","setCompany","agentDetails","fetchAgentDetails","handleAddAgent","handleEditAgent","handleDeleteAgent","deleteLoading","callDetails","fetchCallDetails","editingCallId","setEditingCallId","editInputs","setEditInputs","editLoading","handleEditCall","handleCancelEdit","handleUpdateCall","userRoleIsAdmin","token","localStorage","getItem","handleDateSearch","refreshCalls","openEditModal","agent","handleManualCall","alert","handleOpenAltNumbersModal","call","alternative_numbers","handleSaveAltNumbersWrapper","res","id","success","handleViewCustomerCalls","customerNumber","customerCalls","filteredCalls","filter","customer_number","enrichedCustomer","number","calls","sort","a","b","Date","timestamp","handleViewAllRemarksEdit","remarks","customerMostRecentRemark","cleanRemarks","removeTimestampsAndTags","text","replace","trim","customer","_customer$calls","mostRecentCall","handleSaveViewAllRemarksWrapper","_viewCustomer$calls","_viewCustomer$calls$","toLocaleString","newFormattedRemark","oldRemarks","updatedRemarks","callId","updatedCalls","map","prev","tabClass","key","fetchCompanyInfoWithToken","companyData","payment_status","msg","console","log","err","fileName","_jsxFileName","lineNumber","columnNumber","message","onLogout","setCallDetails","setAgentDetails","userId","query","toLowerCase","hasMeeting","Boolean","meeting_datetime","meeting_description","includes","fields","join","filteredAgents","_agent$name","children","agentNum","data","onSuccess","onError","setLoading","isBlocked","show","onClose","e","preventDefault","_c","$RefreshReg$"],"sources":["D:/Projects/Git Clone File/Call-Center-App/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Login from './components/Login';\nimport Dashboard from './components/Dashboard';\nimport AddAgentModal from './components/Modals/AddAgentModal';\nimport EditAgentModal from './components/Modals/EditAgentModal';\nimport AltNumbersModal from './components/Modals/AltNumbersModal';\nimport ViewAllCallsModal from './components/Modals/ViewAllCallsModal';\n\nimport useAuth from './hooks/useAuth';\nimport useAgents from './hooks/useAgents';\nimport useCalls from './hooks/useCalls';\n\nimport {\n  exportToExcel,\n  exportToPDF,\n  exportToCSV,\n  exportToXML,\n} from './utils/exportHelpers';\n\nimport { formatDuration, callStatusClass } from './utils/format';\nimport { handleSaveAltNumbers, handleSaveViewAllRemarks, fetchCompanyInfo } from './utils/api';\nimport CompanyBlockedOverlay from './components/CompanyBlockedOverlay';\n\nfunction App() {\n  // Auth\n  const {\n    user,\n    loginData,\n    setLoginData,\n    handleLogin,\n    handleLogout,\n    loading,\n    error,\n    setError,\n  } = useAuth();\n\n  // UI States\n  const [currentScreen, setCurrentScreen] = useState('login');\n  const [activeTab, setActiveTab] = useState('calls');\n  const [callSearch, setCallSearch] = useState('');\n  const [agentSearch, setAgentSearch] = useState('');\n  const [fromDate, setFromDate] = useState('');\n  const [toDate, setToDate] = useState('');\n  const [showCallExport, setShowCallExport] = useState(false);\n  const [showAgentExport, setShowAgentExport] = useState(false);\n  const [blockedMessage, setBlockedMessage] = useState('');\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [formData, setFormData] = useState({ agent_number: '', name: '', email: '', password: '', status: 'Active', is_admin: false });\n  const [manualCallNumber, setManualCallNumber] = useState('');\n  const [viewCustomer, setViewCustomer] = useState(null);\n  const [viewAllRemarksEdit, setViewAllRemarksEdit] = useState(false);\n  const [viewAllRemarksInput, setViewAllRemarksInput] = useState('');\n  const [viewAllRemarksLoading, setViewAllRemarksLoading] = useState(false);\n  const [altModal, setAltModal] = useState(false);\n  const [selectedCall, setSelectedCall] = useState(null);\n  const [altNumbersInput, setAltNumbersInput] = useState('');\n  const [altNumbersLoading, setAltNumbersLoading] = useState(false);\n  const [company, setCompany] = useState(null); // Add company state\n\n  // Agents\n  const {\n    agentDetails,\n    fetchAgentDetails,\n    handleAddAgent,\n    handleEditAgent,\n    handleDeleteAgent,\n    deleteLoading,\n  } = useAgents();\n\n  // Calls\n  const {\n    callDetails,\n    fetchCallDetails,\n    editingCallId,\n    setEditingCallId,\n    editInputs,\n    setEditInputs,\n    editLoading,\n    handleEditCall,\n    handleCancelEdit,\n    handleUpdateCall,\n  } = useCalls();\n\n  const userRoleIsAdmin = user?.is_admin;\n\n  const token = localStorage.getItem('token');\n\n  const handleDateSearch = () => {\n    fetchCallDetails(token, fromDate, toDate);\n  };\n\n  const refreshCalls = () => {\n    fetchCallDetails(token, fromDate, toDate);\n  };\n\n  const openEditModal = (agent) => {\n    setFormData(agent);\n    setShowEditModal(true);\n  };\n\n  const handleManualCall = () => {\n    if (!manualCallNumber) return alert(\"Enter a number\");\n    alert(`Pretend calling ${manualCallNumber}`);\n  };\n\n  const handleOpenAltNumbersModal = (call) => {\n    setSelectedCall(call);\n    setAltNumbersInput(call.alternative_numbers || '');\n    setAltModal(true);\n  };\n\n  const handleSaveAltNumbersWrapper = async () => {\n    setAltNumbersLoading(true);\n    const res = await handleSaveAltNumbers(selectedCall.id, altNumbersInput, token);\n    if (res.success) {\n      await fetchCallDetails(token, fromDate, toDate);\n      setAltModal(false);\n    }\n    setAltNumbersLoading(false);\n  };\n\n  const handleViewCustomerCalls = (customerNumber) => {\n    const customerCalls = filteredCalls.filter(call => call.customer_number === customerNumber);\n  \n    const enrichedCustomer = {\n      number: customerNumber,\n      calls: customerCalls.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)), // latest first\n    };\n  \n    setViewCustomer(enrichedCustomer);\n    setViewAllRemarksEdit(false);\n    setViewAllRemarksInput('');\n  };\n  \n  \n  const handleViewAllRemarksEdit = () => {\n    const remarks = customerMostRecentRemark(viewCustomer);\n    const cleanRemarks = removeTimestampsAndTags('');\n    setViewAllRemarksInput(cleanRemarks);\n    setViewAllRemarksEdit(true);\n  };\n  \n  const removeTimestampsAndTags = (text) => {\n    return text\n      .replace(/<[^>]*>/g, '') // remove HTML tags\n      .replace(/\\[\\d{2}\\/\\d{2}\\/\\d{4} \\d{2}:\\d{2}:\\d{2}\\]/g, '') // remove [DD/MM/YYYY HH:MM:SS]\n      .trim();\n  };\n  \n  \n  const customerMostRecentRemark = (customer) => {\n    const mostRecentCall = customer?.calls?.[0];\n    return mostRecentCall?.remarks || '';\n  };\n\n  const handleSaveViewAllRemarksWrapper = async () => {\n    if (!viewCustomer?.calls?.[0]) return;\n  \n    setViewAllRemarksLoading(true);\n  \n    const timestamp = new Date().toLocaleString('en-GB'); // dd/mm/yyyy hh:mm:ss\n    const newFormattedRemark = `${viewAllRemarksInput.trim()} <span style='font-size:10px;color:gray;'>[${timestamp}]</span>`;\n    const oldRemarks = viewCustomer.calls[0]?.remarks || '';\n    const updatedRemarks = `${newFormattedRemark}<br/>${oldRemarks}`;\n  \n    const callId = viewCustomer.calls[0].id;\n  \n    const res = await handleSaveViewAllRemarks(callId, { remarks: updatedRemarks }, token);\n  \n    if (res.success) {\n      // ✅ Update locally — so UI shows updated immediately\n      const updatedCalls = viewCustomer.calls.map(call =>\n        call.id === callId ? { ...call, remarks: updatedRemarks } : call\n      );\n  \n      setViewCustomer(prev => ({\n        ...prev,\n        calls: updatedCalls,\n      }));\n  \n      setViewAllRemarksEdit(false);\n      setViewAllRemarksInput('');\n    }\n  \n    setViewAllRemarksLoading(false);\n  };\n  \n  \n  \n\n  const tabClass = (key) =>\n    `py-3 px-4 text-sm font-medium border-b-2 ${\n      activeTab === key\n        ? 'border-blue-500 text-blue-600'\n        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n    }`;\n\n  const fetchCompanyInfoWithToken = async (token) => {\n    try {\n      const companyData = await fetchCompanyInfo(token);\n      setCompany(companyData); // Update company state\n      // Check for fully blocked statuses: 'Fully Close' or 'Unpaid'\n      if (companyData && (companyData.status === 'Fully Close' || companyData.payment_status === 'Unpaid')) {\n        const msg = 'Your services are stopped. Please contact the sales person.';\n        setBlockedMessage(msg);\n        console.log('Company is FULLY blocked, blockedMessage set to:', msg, 'Company status:', companyData.status, 'Payment status:', companyData.payment_status);\n        return; // do not fetch data and show full overlay\n      }\n      setBlockedMessage('');\n      console.log('Company is NOT FULLY blocked, blockedMessage set to empty.', 'Company status:', companyData?.status, 'Payment status:', companyData?.payment_status);\n      fetchCallDetails(token);\n      fetchAgentDetails(token);\n    } catch (err) {\n      console.error(\"Failed to fetch company info or other data:\", err);\n      setError(\"Failed to load company data.\");\n    }\n  };\n\n  useEffect(() => {\n    if (user && token) {\n      setCurrentScreen('dashboard');\n      fetchCompanyInfoWithToken(token);\n    }\n  }, [user, token]);\n\n  if (currentScreen === 'login') {\n    return (\n      <Login\n        loginData={loginData}\n        setLoginData={setLoginData}\n        handleLogin={handleLogin}\n        loading={loading}\n        error={error}\n      />\n    );\n  }\n\n  if (blockedMessage) {\n    return (\n      <CompanyBlockedOverlay message={blockedMessage} onLogout={() => { handleLogout(); setCompany(null); setCallDetails([]); setAgentDetails([]); setBlockedMessage(''); setLoginData({ userId: '', password: '' }); setManualCallNumber(''); setViewCustomer(null); setAltModal(false); setSelectedCall(null); setActiveTab('calls'); setCallSearch(''); setAgentSearch(''); setFromDate(''); setToDate(''); setShowCallExport(false); setShowAgentExport(false); setShowAddModal(false); setShowEditModal(false); setFormData({ agent_number: '', name: '', email: '', password: '', status: 'Active', is_admin: false }); setEditingCallId(null); setEditInputs({}); setViewAllRemarksEdit(false); setViewAllRemarksInput(''); setViewAllRemarksLoading(false); setAltNumbersInput(''); setAltNumbersLoading(''); setCurrentScreen('login'); }} user={user} />\n    );\n  }\n\n  const filteredCalls = callDetails.filter((call) => {\n    const query = (callSearch || '').trim().toLowerCase();\n    if (!query) return true;\n\n    const hasMeeting = Boolean(call.meeting_datetime || (call.meeting_description && call.meeting_description.trim()));\n    // If the user searches for 'meeting' (or similar), only show calls that have meeting info\n    if (['meeting', 'meetings', 'meet'].includes(query)) {\n      return hasMeeting;\n    }\n\n    const fields = [\n      call.customer_number || '',\n      call.agent_number || '',\n      (call.name || '').replace(/<[^>]*>/g, ''),\n      (call.remarks || '').replace(/<[^>]*>/g, ''),\n      call.meeting_description || '',\n      call.meeting_datetime ? new Date(call.meeting_datetime).toLocaleString() : ''\n    ];\n    return fields.join(' ').toLowerCase().includes(query);\n  });\n\n  const filteredAgents = agentDetails.filter((agent) =>\n    agent.name?.toLowerCase().includes(agentSearch.toLowerCase())\n  );\n\n  return (\n    <>\n      <Dashboard\n        user={user}\n        handleLogout={() => {\n          handleLogout(); // Call useAuth's logout to clear token and user from localStorage\n          setCompany(null);\n          setCallDetails([]);\n          setAgentDetails([]);\n          setBlockedMessage('');\n          setLoginData({ userId: '', password: '' });\n          setManualCallNumber('');\n          setViewCustomer(null);\n          setAltModal(false);\n          setSelectedCall(null);\n          setActiveTab('calls'); // Reset active tab to default\n          setCallSearch('');\n          setAgentSearch('');\n          setFromDate('');\n          setToDate('');\n          setShowCallExport(false);\n          setShowAgentExport(false);\n          setShowAddModal(false);\n          setShowEditModal(false);\n          setFormData({ agent_number: '', name: '', email: '', password: '', status: 'Active', is_admin: false });\n          setEditingCallId(null);\n          setEditInputs({});\n          setViewAllRemarksEdit(false);\n          setViewAllRemarksInput('');\n          setViewAllRemarksLoading(false);\n          setAltNumbersInput('');\n          setAltNumbersLoading('');\n          setCurrentScreen('login');\n          // Add any other states that need resetting\n        }}\n        activeTab={activeTab}\n        setActiveTab={setActiveTab}\n        tabClass={tabClass}\n        refreshCalls={refreshCalls}\n        callSearch={callSearch}\n        setCallSearch={setCallSearch}\n        agentSearch={agentSearch}\n        setAgentSearch={setAgentSearch}\n        fromDate={fromDate}\n        setFromDate={setFromDate}\n        toDate={toDate}\n        setToDate={setToDate}\n        handleDateSearch={handleDateSearch}\n        showCallExport={showCallExport}\n        setShowCallExport={setShowCallExport}\n        showAgentExport={showAgentExport}\n        setShowAgentExport={setShowAgentExport}\n        filteredCalls={filteredCalls}\n        filteredAgents={filteredAgents}\n        exportToExcel={exportToExcel}\n        exportToPDF={exportToPDF}\n        exportToCSV={exportToCSV}\n        exportToXML={exportToXML}\n        setShowAddModal={setShowAddModal}\n        setFormData={setFormData}\n        setError={setError}\n        userRoleIsAdmin={userRoleIsAdmin}\n        editingCallId={editingCallId}\n        editInputs={editInputs}\n        setEditInputs={setEditInputs}\n        handleEditCall={handleEditCall}\n        handleCancelEdit={handleCancelEdit}\n        handleUpdateCall={(id) => handleUpdateCall(id, token)}\n        editLoading={editLoading}\n        formatDuration={formatDuration}\n        callStatusClass={callStatusClass}\n        handleViewCustomerCalls={handleViewCustomerCalls}\n        handleOpenAltNumbersModal={handleOpenAltNumbersModal}\n        callDetails={callDetails}\n        openEditModal={openEditModal}\n        handleDeleteAgent={(agentNum) => handleDeleteAgent(agentNum, token)}\n        deleteLoading={deleteLoading}\n        showAddModal={showAddModal}\n        showEditModal={showEditModal}\n        formData={formData}\n        setShowEditModal={setShowEditModal}\n        handleAddAgent={(data, onSuccess, onError, setLoading) =>\n          handleAddAgent(data, token, onSuccess, onError, setLoading)\n        }\n        handleEditAgent={(data, onSuccess, onError, setLoading) =>\n          handleEditAgent(data, token, onSuccess, onError, setLoading)\n        }\n        loading={loading}\n        error={error}\n        manualCallNumber={manualCallNumber}\n        setManualCallNumber={setManualCallNumber}\n        handleManualCall={handleManualCall}\n        isBlocked={!!(company?.status === 'Fully Close' || company?.status === 'Partially Close' || company?.payment_status === 'Unpaid')}\n        // Pass the company object to Dashboard so it can pass to CompanyExportGuard\n        company={company}\n      />\n\n      <AddAgentModal\n        show={showAddModal}\n        onClose={() => setShowAddModal(false)}\n        formData={formData}\n        setFormData={setFormData}\n        handleAddAgent={(e) => {\n          e.preventDefault();\n          handleAddAgent(formData, token, () => setShowAddModal(false), setError, () => {});\n        }}\n        loading={loading}\n        error={error}\n      />\n\n      <EditAgentModal\n        show={showEditModal}\n        onClose={() => setShowEditModal(false)}\n        formData={formData}\n        setFormData={setFormData}\n        handleEditAgent={(e) => {\n          e.preventDefault();\n          handleEditAgent(formData, token, () => setShowEditModal(false), setError, () => {});\n        }}\n        loading={loading}\n        error={error}\n        user={user}\n      />\n\n      <AltNumbersModal\n        show={altModal}\n        onClose={() => setAltModal(false)}\n        selectedCall={selectedCall}\n        altNumbersInput={altNumbersInput}\n        setAltNumbersInput={setAltNumbersInput}\n        handleSaveAltNumbers={handleSaveAltNumbersWrapper}\n        altNumbersLoading={altNumbersLoading}\n      />\n\n      <ViewAllCallsModal\n        show={!!viewCustomer}\n        onClose={() => setViewCustomer(null)}\n        viewCustomer={viewCustomer}\n        viewAllRemarksEdit={viewAllRemarksEdit}\n        viewAllRemarksInput={viewAllRemarksInput}\n        setViewAllRemarksInput={setViewAllRemarksInput}\n        handleViewAllRemarksEdit={handleViewAllRemarksEdit}\n        handleSaveViewAllRemarks={handleSaveViewAllRemarksWrapper}\n        viewAllRemarksLoading={viewAllRemarksLoading}\n        setViewAllRemarksEdit={setViewAllRemarksEdit}\n      />\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}