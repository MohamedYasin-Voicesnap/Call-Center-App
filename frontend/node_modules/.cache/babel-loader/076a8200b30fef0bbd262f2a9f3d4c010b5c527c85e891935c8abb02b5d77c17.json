{"ast":null,"code":"import * as XLSX from 'xlsx';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport { saveAs } from 'file-saver';\nimport { js2xml } from 'xml-js';\nexport const exportToExcel = (data, filename) => {\n  const ws = XLSX.utils.json_to_sheet(data);\n  const wb = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n  XLSX.writeFile(wb, filename + '.xlsx');\n};\nexport const exportToCSV = (data, filename) => {\n  const ws = XLSX.utils.json_to_sheet(data);\n  const csv = XLSX.utils.sheet_to_csv(ws);\n  const blob = new Blob([csv], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  saveAs(blob, filename + '.csv');\n};\nexport const exportToPDF = (data, filename, columns) => {\n  const doc = new jsPDF();\n  doc.autoTable({\n    head: [columns],\n    body: data.map(row => columns.map(col => row[col]))\n  });\n  doc.save(filename + '.pdf');\n};\nexport const exportToXML = (data, filename) => {\n  const xml = js2xml({\n    elements: [{\n      type: 'element',\n      name: 'root',\n      elements: data.map(row => ({\n        type: 'element',\n        name: 'row',\n        elements: Object.entries(row).map(([k, v]) => ({\n          type: 'element',\n          name: k,\n          elements: [{\n            type: 'text',\n            text: String(v)\n          }]\n        }))\n      }))\n    }]\n  }, {\n    compact: false,\n    spaces: 2\n  });\n  const blob = new Blob([xml], {\n    type: 'application/xml'\n  });\n  saveAs(blob, filename + '.xml');\n};","map":{"version":3,"names":["XLSX","jsPDF","saveAs","js2xml","exportToExcel","data","filename","ws","utils","json_to_sheet","wb","book_new","book_append_sheet","writeFile","exportToCSV","csv","sheet_to_csv","blob","Blob","type","exportToPDF","columns","doc","autoTable","head","body","map","row","col","save","exportToXML","xml","elements","name","Object","entries","k","v","text","String","compact","spaces"],"sources":["D:/Projects/Asterisk Frontend M/frontend/src/utils/exportHelpers.js"],"sourcesContent":["import * as XLSX from 'xlsx';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport { saveAs } from 'file-saver';\r\nimport { js2xml } from 'xml-js';\r\n\r\nexport const exportToExcel = (data, filename) => {\r\n  const ws = XLSX.utils.json_to_sheet(data);\r\n  const wb = XLSX.utils.book_new();\r\n  XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n  XLSX.writeFile(wb, filename + '.xlsx');\r\n};\r\n\r\nexport const exportToCSV = (data, filename) => {\r\n  const ws = XLSX.utils.json_to_sheet(data);\r\n  const csv = XLSX.utils.sheet_to_csv(ws);\r\n  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n  saveAs(blob, filename + '.csv');\r\n};\r\n\r\nexport const exportToPDF = (data, filename, columns) => {\r\n  const doc = new jsPDF();\r\n  doc.autoTable({ head: [columns], body: data.map(row => columns.map(col => row[col])) });\r\n  doc.save(filename + '.pdf');\r\n};\r\n\r\nexport const exportToXML = (data, filename) => {\r\n  const xml = js2xml({ elements: [{ type: 'element', name: 'root', elements: data.map(row => ({ type: 'element', name: 'row', elements: Object.entries(row).map(([k, v]) => ({ type: 'element', name: k, elements: [{ type: 'text', text: String(v) }] })) })) }] }, { compact: false, spaces: 2 });\r\n  const blob = new Blob([xml], { type: 'application/xml' });\r\n  saveAs(blob, filename + '.xml');\r\n};"],"mappings":"AAAA,OAAO,KAAKA,IAAI,MAAM,MAAM;AAC5B,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,iBAAiB;AACxB,SAASC,MAAM,QAAQ,YAAY;AACnC,SAASC,MAAM,QAAQ,QAAQ;AAE/B,OAAO,MAAMC,aAAa,GAAGA,CAACC,IAAI,EAAEC,QAAQ,KAAK;EAC/C,MAAMC,EAAE,GAAGP,IAAI,CAACQ,KAAK,CAACC,aAAa,CAACJ,IAAI,CAAC;EACzC,MAAMK,EAAE,GAAGV,IAAI,CAACQ,KAAK,CAACG,QAAQ,CAAC,CAAC;EAChCX,IAAI,CAACQ,KAAK,CAACI,iBAAiB,CAACF,EAAE,EAAEH,EAAE,EAAE,QAAQ,CAAC;EAC9CP,IAAI,CAACa,SAAS,CAACH,EAAE,EAAEJ,QAAQ,GAAG,OAAO,CAAC;AACxC,CAAC;AAED,OAAO,MAAMQ,WAAW,GAAGA,CAACT,IAAI,EAAEC,QAAQ,KAAK;EAC7C,MAAMC,EAAE,GAAGP,IAAI,CAACQ,KAAK,CAACC,aAAa,CAACJ,IAAI,CAAC;EACzC,MAAMU,GAAG,GAAGf,IAAI,CAACQ,KAAK,CAACQ,YAAY,CAACT,EAAE,CAAC;EACvC,MAAMU,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACH,GAAG,CAAC,EAAE;IAAEI,IAAI,EAAE;EAA0B,CAAC,CAAC;EACjEjB,MAAM,CAACe,IAAI,EAAEX,QAAQ,GAAG,MAAM,CAAC;AACjC,CAAC;AAED,OAAO,MAAMc,WAAW,GAAGA,CAACf,IAAI,EAAEC,QAAQ,EAAEe,OAAO,KAAK;EACtD,MAAMC,GAAG,GAAG,IAAIrB,KAAK,CAAC,CAAC;EACvBqB,GAAG,CAACC,SAAS,CAAC;IAAEC,IAAI,EAAE,CAACH,OAAO,CAAC;IAAEI,IAAI,EAAEpB,IAAI,CAACqB,GAAG,CAACC,GAAG,IAAIN,OAAO,CAACK,GAAG,CAACE,GAAG,IAAID,GAAG,CAACC,GAAG,CAAC,CAAC;EAAE,CAAC,CAAC;EACvFN,GAAG,CAACO,IAAI,CAACvB,QAAQ,GAAG,MAAM,CAAC;AAC7B,CAAC;AAED,OAAO,MAAMwB,WAAW,GAAGA,CAACzB,IAAI,EAAEC,QAAQ,KAAK;EAC7C,MAAMyB,GAAG,GAAG5B,MAAM,CAAC;IAAE6B,QAAQ,EAAE,CAAC;MAAEb,IAAI,EAAE,SAAS;MAAEc,IAAI,EAAE,MAAM;MAAED,QAAQ,EAAE3B,IAAI,CAACqB,GAAG,CAACC,GAAG,KAAK;QAAER,IAAI,EAAE,SAAS;QAAEc,IAAI,EAAE,KAAK;QAAED,QAAQ,EAAEE,MAAM,CAACC,OAAO,CAACR,GAAG,CAAC,CAACD,GAAG,CAAC,CAAC,CAACU,CAAC,EAAEC,CAAC,CAAC,MAAM;UAAElB,IAAI,EAAE,SAAS;UAAEc,IAAI,EAAEG,CAAC;UAAEJ,QAAQ,EAAE,CAAC;YAAEb,IAAI,EAAE,MAAM;YAAEmB,IAAI,EAAEC,MAAM,CAACF,CAAC;UAAE,CAAC;QAAE,CAAC,CAAC;MAAE,CAAC,CAAC;IAAE,CAAC;EAAE,CAAC,EAAE;IAAEG,OAAO,EAAE,KAAK;IAAEC,MAAM,EAAE;EAAE,CAAC,CAAC;EACjS,MAAMxB,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACa,GAAG,CAAC,EAAE;IAAEZ,IAAI,EAAE;EAAkB,CAAC,CAAC;EACzDjB,MAAM,CAACe,IAAI,EAAEX,QAAQ,GAAG,MAAM,CAAC;AACjC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}