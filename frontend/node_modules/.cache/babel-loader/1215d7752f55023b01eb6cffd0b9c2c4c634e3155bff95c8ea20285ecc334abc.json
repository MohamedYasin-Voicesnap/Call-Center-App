{"ast":null,"code":"const API_BASE = 'http://localhost:5000/api';\nexport const fetchCallDetails = async (authToken, from = '', to = '') => {\n  try {\n    let url = `${API_BASE}/calls`;\n    const params = [];\n    if (from) params.push(`from=${from}`);\n    if (to) params.push(`to=${to}`);\n    if (params.length) url += `?${params.join('&')}`;\n    const response = await fetch(url, {\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    });\n    if (response.ok) {\n      const data = await response.json();\n      return data.calls || [];\n    }\n  } catch (err) {\n    console.error('Failed to fetch call details:', err);\n  }\n  return [];\n};\nexport const fetchAgentDetails = async authToken => {\n  try {\n    const response = await fetch(`${API_BASE}/agents`, {\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    });\n    if (response.ok) {\n      const data = await response.json();\n      return data.agents || [];\n    }\n  } catch (err) {\n    console.error('Failed to fetch agent details:', err);\n  }\n  return [];\n};\nexport const handleLogin = async loginData => {\n  try {\n    const response = await fetch(`${API_BASE}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(loginData)\n    });\n    const data = await response.json();\n    if (response.ok) {\n      return {\n        success: true,\n        data\n      };\n    } else {\n      return {\n        success: false,\n        message: data.message || 'Login failed'\n      };\n    }\n  } catch (err) {\n    return {\n      success: false,\n      message: 'Network error. Please try again.'\n    };\n  }\n};\nexport const handleAddAgent = async (formData, token) => {\n  try {\n    const response = await fetch(`${API_BASE}/agents`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(formData)\n    });\n    const data = await response.json();\n    if (response.ok) {\n      return {\n        success: true,\n        data\n      };\n    } else {\n      return {\n        success: false,\n        message: data.message || 'Failed to add agent'\n      };\n    }\n  } catch (err) {\n    return {\n      success: false,\n      message: 'Network error. Please try again.'\n    };\n  }\n};\nexport const handleEditAgent = async (formData, token) => {\n  try {\n    const response = await fetch(`${API_BASE}/agents/${formData.agent_number}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(formData)\n    });\n    const data = await response.json();\n    if (response.ok) {\n      return {\n        success: true,\n        data\n      };\n    } else {\n      return {\n        success: false,\n        message: data.message || 'Failed to edit agent'\n      };\n    }\n  } catch (err) {\n    return {\n      success: false,\n      message: 'Network error. Please try again.'\n    };\n  }\n};\nexport const handleDeleteAgent = async (agentNumber, token) => {\n  try {\n    const response = await fetch(`${API_BASE}/agents/${agentNumber}`, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const data = await response.json();\n    if (response.ok) {\n      return {\n        success: true,\n        data\n      };\n    } else {\n      return {\n        success: false,\n        message: data.message || 'Failed to delete agent'\n      };\n    }\n  } catch (err) {\n    return {\n      success: false,\n      message: 'Network error. Please try again.'\n    };\n  }\n};\nexport const handleUpdateCall = async (callId, editInputs, token) => {\n  try {\n    const response = await fetch(`${API_BASE}/calls/${callId}/custom`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(editInputs)\n    });\n    if (response.ok) {\n      return {\n        success: true\n      };\n    }\n  } catch (err) {}\n  return {\n    success: false\n  };\n};\nexport const handleSaveAltNumbers = async (callId, altNumbersInput, token) => {\n  try {\n    const response = await fetch(`${API_BASE}/calls/${callId}/alternative-numbers`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        alternative_numbers: altNumbersInput\n      })\n    });\n    if (response.ok) {\n      return {\n        success: true\n      };\n    }\n  } catch (err) {}\n  return {\n    success: false\n  };\n};\nexport const handleSaveViewAllRemarks = async (callId, remarksData, token) => {\n  try {\n    const response = await fetch(`${API_BASE}/calls/${callId}/custom`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify(remarksData)\n    });\n    if (response.ok) {\n      return {\n        success: true\n      };\n    }\n  } catch (err) {}\n  return {\n    success: false\n  };\n};","map":{"version":3,"names":["API_BASE","fetchCallDetails","authToken","from","to","url","params","push","length","join","response","fetch","headers","Authorization","ok","data","json","calls","err","console","error","fetchAgentDetails","agents","handleLogin","loginData","method","body","JSON","stringify","success","message","handleAddAgent","formData","token","handleEditAgent","agent_number","handleDeleteAgent","agentNumber","handleUpdateCall","callId","editInputs","handleSaveAltNumbers","altNumbersInput","alternative_numbers","handleSaveViewAllRemarks","remarksData"],"sources":["D:/Projects/Asterisk Frontend M/frontend/src/utils/api.js"],"sourcesContent":["const API_BASE = 'http://localhost:5000/api';\r\n\r\nexport const fetchCallDetails = async (authToken, from = '', to = '') => {\r\n  try {\r\n    let url = `${API_BASE}/calls`;\r\n    const params = [];\r\n    if (from) params.push(`from=${from}`);\r\n    if (to) params.push(`to=${to}`);\r\n    if (params.length) url += `?${params.join('&')}`;\r\n    const response = await fetch(url, {\r\n      headers: { Authorization: `Bearer ${authToken}` },\r\n    });\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      return data.calls || [];\r\n    }\r\n  } catch (err) {\r\n    console.error('Failed to fetch call details:', err);\r\n  }\r\n  return [];\r\n};\r\n\r\nexport const fetchAgentDetails = async (authToken) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/agents`, {\r\n      headers: { Authorization: `Bearer ${authToken}` },\r\n    });\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      return data.agents || [];\r\n    }\r\n  } catch (err) {\r\n    console.error('Failed to fetch agent details:', err);\r\n  }\r\n  return [];\r\n};\r\n\r\nexport const handleLogin = async (loginData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/login`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(loginData),\r\n    });\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      return { success: true, data };\r\n    } else {\r\n      return { success: false, message: data.message || 'Login failed' };\r\n    }\r\n  } catch (err) {\r\n    return { success: false, message: 'Network error. Please try again.' };\r\n  }\r\n};\r\n\r\nexport const handleAddAgent = async (formData, token) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/agents`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(formData),\r\n    });\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      return { success: true, data };\r\n    } else {\r\n      return { success: false, message: data.message || 'Failed to add agent' };\r\n    }\r\n  } catch (err) {\r\n    return { success: false, message: 'Network error. Please try again.' };\r\n  }\r\n};\r\n\r\nexport const handleEditAgent = async (formData, token) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/agents/${formData.agent_number}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(formData),\r\n    });\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      return { success: true, data };\r\n    } else {\r\n      return { success: false, message: data.message || 'Failed to edit agent' };\r\n    }\r\n  } catch (err) {\r\n    return { success: false, message: 'Network error. Please try again.' };\r\n  }\r\n};\r\n\r\nexport const handleDeleteAgent = async (agentNumber, token) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/agents/${agentNumber}`, {\r\n      method: 'DELETE',\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    });\r\n    const data = await response.json();\r\n    if (response.ok) {\r\n      return { success: true, data };\r\n    } else {\r\n      return { success: false, message: data.message || 'Failed to delete agent' };\r\n    }\r\n  } catch (err) {\r\n    return { success: false, message: 'Network error. Please try again.' };\r\n  }\r\n};\r\n\r\nexport const handleUpdateCall = async (callId, editInputs, token) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/calls/${callId}/custom`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(editInputs),\r\n    });\r\n    if (response.ok) {\r\n      return { success: true };\r\n    }\r\n  } catch (err) {}\r\n  return { success: false };\r\n};\r\n\r\nexport const handleSaveAltNumbers = async (callId, altNumbersInput, token) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/calls/${callId}/alternative-numbers`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({ alternative_numbers: altNumbersInput }),\r\n    });\r\n    if (response.ok) {\r\n      return { success: true };\r\n    }\r\n  } catch (err) {}\r\n  return { success: false };\r\n};\r\n\r\nexport const handleSaveViewAllRemarks = async (callId, remarksData, token) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE}/calls/${callId}/custom`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(remarksData),\r\n    });\r\n    if (response.ok) {\r\n      return { success: true };\r\n    }\r\n  } catch (err) {}\r\n  return { success: false };\r\n};"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,2BAA2B;AAE5C,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,SAAS,EAAEC,IAAI,GAAG,EAAE,EAAEC,EAAE,GAAG,EAAE,KAAK;EACvE,IAAI;IACF,IAAIC,GAAG,GAAG,GAAGL,QAAQ,QAAQ;IAC7B,MAAMM,MAAM,GAAG,EAAE;IACjB,IAAIH,IAAI,EAAEG,MAAM,CAACC,IAAI,CAAC,QAAQJ,IAAI,EAAE,CAAC;IACrC,IAAIC,EAAE,EAAEE,MAAM,CAACC,IAAI,CAAC,MAAMH,EAAE,EAAE,CAAC;IAC/B,IAAIE,MAAM,CAACE,MAAM,EAAEH,GAAG,IAAI,IAAIC,MAAM,CAACG,IAAI,CAAC,GAAG,CAAC,EAAE;IAChD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAG,EAAE;MAChCO,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUX,SAAS;MAAG;IAClD,CAAC,CAAC;IACF,IAAIQ,QAAQ,CAACI,EAAE,EAAE;MACf,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAACE,KAAK,IAAI,EAAE;IACzB;EACF,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEF,GAAG,CAAC;EACrD;EACA,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAMG,iBAAiB,GAAG,MAAOnB,SAAS,IAAK;EACpD,IAAI;IACF,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,QAAQ,SAAS,EAAE;MACjDY,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUX,SAAS;MAAG;IAClD,CAAC,CAAC;IACF,IAAIQ,QAAQ,CAACI,EAAE,EAAE;MACf,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAACO,MAAM,IAAI,EAAE;IAC1B;EACF,CAAC,CAAC,OAAOJ,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEF,GAAG,CAAC;EACtD;EACA,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAMK,WAAW,GAAG,MAAOC,SAAS,IAAK;EAC9C,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,QAAQ,QAAQ,EAAE;MAChDyB,MAAM,EAAE,MAAM;MACdb,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/Cc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,SAAS;IAChC,CAAC,CAAC;IACF,MAAMT,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClC,IAAIN,QAAQ,CAACI,EAAE,EAAE;MACf,OAAO;QAAEe,OAAO,EAAE,IAAI;QAAEd;MAAK,CAAC;IAChC,CAAC,MAAM;MACL,OAAO;QAAEc,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAEf,IAAI,CAACe,OAAO,IAAI;MAAe,CAAC;IACpE;EACF,CAAC,CAAC,OAAOZ,GAAG,EAAE;IACZ,OAAO;MAAEW,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAmC,CAAC;EACxE;AACF,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,KAAK,KAAK;EACvD,IAAI;IACF,MAAMvB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,QAAQ,SAAS,EAAE;MACjDyB,MAAM,EAAE,MAAM;MACdb,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUoB,KAAK;MAChC,CAAC;MACDP,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,QAAQ;IAC/B,CAAC,CAAC;IACF,MAAMjB,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClC,IAAIN,QAAQ,CAACI,EAAE,EAAE;MACf,OAAO;QAAEe,OAAO,EAAE,IAAI;QAAEd;MAAK,CAAC;IAChC,CAAC,MAAM;MACL,OAAO;QAAEc,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAEf,IAAI,CAACe,OAAO,IAAI;MAAsB,CAAC;IAC3E;EACF,CAAC,CAAC,OAAOZ,GAAG,EAAE;IACZ,OAAO;MAAEW,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAmC,CAAC;EACxE;AACF,CAAC;AAED,OAAO,MAAMI,eAAe,GAAG,MAAAA,CAAOF,QAAQ,EAAEC,KAAK,KAAK;EACxD,IAAI;IACF,MAAMvB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,QAAQ,WAAWgC,QAAQ,CAACG,YAAY,EAAE,EAAE;MAC1EV,MAAM,EAAE,KAAK;MACbb,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUoB,KAAK;MAChC,CAAC;MACDP,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,QAAQ;IAC/B,CAAC,CAAC;IACF,MAAMjB,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClC,IAAIN,QAAQ,CAACI,EAAE,EAAE;MACf,OAAO;QAAEe,OAAO,EAAE,IAAI;QAAEd;MAAK,CAAC;IAChC,CAAC,MAAM;MACL,OAAO;QAAEc,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAEf,IAAI,CAACe,OAAO,IAAI;MAAuB,CAAC;IAC5E;EACF,CAAC,CAAC,OAAOZ,GAAG,EAAE;IACZ,OAAO;MAAEW,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAmC,CAAC;EACxE;AACF,CAAC;AAED,OAAO,MAAMM,iBAAiB,GAAG,MAAAA,CAAOC,WAAW,EAAEJ,KAAK,KAAK;EAC7D,IAAI;IACF,MAAMvB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,QAAQ,WAAWqC,WAAW,EAAE,EAAE;MAChEZ,MAAM,EAAE,QAAQ;MAChBb,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUoB,KAAK;MAAG;IAC9C,CAAC,CAAC;IACF,MAAMlB,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClC,IAAIN,QAAQ,CAACI,EAAE,EAAE;MACf,OAAO;QAAEe,OAAO,EAAE,IAAI;QAAEd;MAAK,CAAC;IAChC,CAAC,MAAM;MACL,OAAO;QAAEc,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAEf,IAAI,CAACe,OAAO,IAAI;MAAyB,CAAC;IAC9E;EACF,CAAC,CAAC,OAAOZ,GAAG,EAAE;IACZ,OAAO;MAAEW,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAmC,CAAC;EACxE;AACF,CAAC;AAED,OAAO,MAAMQ,gBAAgB,GAAG,MAAAA,CAAOC,MAAM,EAAEC,UAAU,EAAEP,KAAK,KAAK;EACnE,IAAI;IACF,MAAMvB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,QAAQ,UAAUuC,MAAM,SAAS,EAAE;MACjEd,MAAM,EAAE,KAAK;MACbb,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUoB,KAAK;MAChC,CAAC;MACDP,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACY,UAAU;IACjC,CAAC,CAAC;IACF,IAAI9B,QAAQ,CAACI,EAAE,EAAE;MACf,OAAO;QAAEe,OAAO,EAAE;MAAK,CAAC;IAC1B;EACF,CAAC,CAAC,OAAOX,GAAG,EAAE,CAAC;EACf,OAAO;IAAEW,OAAO,EAAE;EAAM,CAAC;AAC3B,CAAC;AAED,OAAO,MAAMY,oBAAoB,GAAG,MAAAA,CAAOF,MAAM,EAAEG,eAAe,EAAET,KAAK,KAAK;EAC5E,IAAI;IACF,MAAMvB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,QAAQ,UAAUuC,MAAM,sBAAsB,EAAE;MAC9Ed,MAAM,EAAE,KAAK;MACbb,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUoB,KAAK;MAChC,CAAC;MACDP,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEe,mBAAmB,EAAED;MAAgB,CAAC;IAC/D,CAAC,CAAC;IACF,IAAIhC,QAAQ,CAACI,EAAE,EAAE;MACf,OAAO;QAAEe,OAAO,EAAE;MAAK,CAAC;IAC1B;EACF,CAAC,CAAC,OAAOX,GAAG,EAAE,CAAC;EACf,OAAO;IAAEW,OAAO,EAAE;EAAM,CAAC;AAC3B,CAAC;AAED,OAAO,MAAMe,wBAAwB,GAAG,MAAAA,CAAOL,MAAM,EAAEM,WAAW,EAAEZ,KAAK,KAAK;EAC5E,IAAI;IACF,MAAMvB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,QAAQ,UAAUuC,MAAM,SAAS,EAAE;MACjEd,MAAM,EAAE,KAAK;MACbb,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUoB,KAAK;MAChC,CAAC;MACDP,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACiB,WAAW;IAClC,CAAC,CAAC;IACF,IAAInC,QAAQ,CAACI,EAAE,EAAE;MACf,OAAO;QAAEe,OAAO,EAAE;MAAK,CAAC;IAC1B;EACF,CAAC,CAAC,OAAOX,GAAG,EAAE,CAAC;EACf,OAAO;IAAEW,OAAO,EAAE;EAAM,CAAC;AAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}