{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { fetchAgentDetails as apiFetchAgentDetails, handleAddAgent as apiHandleAddAgent, handleEditAgent as apiHandleEditAgent, handleDeleteAgent as apiHandleDeleteAgent, postAgentBreakStatus, fetchAllAgentBreaks } from '../utils/api';\nimport { closeLatestAgentBreak as apiCloseLatestAgentBreak } from '../utils/api';\nimport { fetchAgentsCurrentStatus as apiFetchAgentsCurrentStatus } from '../utils/api';\nexport default function useAgents() {\n  _s();\n  const [agentDetails, setAgentDetails] = useState([]);\n  const [deleteLoading, setDeleteLoading] = useState(false);\n  const [currentStatusMap, setCurrentStatusMap] = useState({});\n  const fetchAgentDetails = async authToken => {\n    const agents = await apiFetchAgentDetails(authToken);\n    setAgentDetails(agents);\n  };\n  const refreshAgentsCurrentStatus = async authToken => {\n    const map = await apiFetchAgentsCurrentStatus(authToken);\n    setCurrentStatusMap(map);\n  };\n  const handleAddAgent = async (formData, token, onSuccess, onError, setLoading) => {\n    setLoading(true);\n    const result = await apiHandleAddAgent(formData, token);\n    if (result.success) {\n      if (onSuccess) onSuccess();\n      fetchAgentDetails(token);\n    } else {\n      if (onError) onError(result.message);\n    }\n    setLoading(false);\n  };\n  const handleEditAgent = async (formData, token, onSuccess, onError, setLoading) => {\n    setLoading(true);\n    const result = await apiHandleEditAgent(formData, token);\n    if (result.success) {\n      if (onSuccess) onSuccess();\n      fetchAgentDetails(token);\n    } else {\n      if (onError) onError(result.message);\n    }\n    setLoading(false);\n  };\n  const handleDeleteAgent = async (agentNumber, token, onSuccess, onError) => {\n    setDeleteLoading(true);\n    const result = await apiHandleDeleteAgent(agentNumber, token);\n    if (result.success) {\n      setAgentDetails(prev => prev.filter(agent => agent.agent_number !== agentNumber));\n      if (onSuccess) onSuccess();\n    } else {\n      if (onError) onError(result.message);\n    }\n    setDeleteLoading(false);\n  };\n\n  // Save agent break/working status\n  const saveAgentBreakStatus = async (breakData, token) => {\n    return await postAgentBreakStatus(breakData, token);\n  };\n\n  // Close latest ongoing break\n  const closeLatestAgentBreak = async (agentNumber, breakEnd, token) => {\n    return await apiCloseLatestAgentBreak(agentNumber, breakEnd, token);\n  };\n\n  // Fetch all agent break/working status records (admin)\n  const getAllAgentBreaks = async (token, search = '') => {\n    return await fetchAllAgentBreaks(token, search);\n  };\n  return {\n    agentDetails,\n    setAgentDetails,\n    currentStatusMap,\n    refreshAgentsCurrentStatus,\n    fetchAgentDetails,\n    handleAddAgent,\n    handleEditAgent,\n    handleDeleteAgent,\n    deleteLoading,\n    setDeleteLoading,\n    saveAgentBreakStatus,\n    closeLatestAgentBreak,\n    getAllAgentBreaks\n  };\n}\n_s(useAgents, \"85NrV3lfQ7VFwMGkdZhhSMDpoek=\");","map":{"version":3,"names":["useState","fetchAgentDetails","apiFetchAgentDetails","handleAddAgent","apiHandleAddAgent","handleEditAgent","apiHandleEditAgent","handleDeleteAgent","apiHandleDeleteAgent","postAgentBreakStatus","fetchAllAgentBreaks","closeLatestAgentBreak","apiCloseLatestAgentBreak","fetchAgentsCurrentStatus","apiFetchAgentsCurrentStatus","useAgents","_s","agentDetails","setAgentDetails","deleteLoading","setDeleteLoading","currentStatusMap","setCurrentStatusMap","authToken","agents","refreshAgentsCurrentStatus","map","formData","token","onSuccess","onError","setLoading","result","success","message","agentNumber","prev","filter","agent","agent_number","saveAgentBreakStatus","breakData","breakEnd","getAllAgentBreaks","search"],"sources":["D:/Projects/Call center App/frontend/src/hooks/useAgents.js"],"sourcesContent":["import { useState } from 'react';\nimport {\n  fetchAgentDetails as apiFetchAgentDetails,\n  handleAddAgent as apiHandleAddAgent,\n  handleEditAgent as apiHandleEditAgent,\n  handleDeleteAgent as apiHandleDeleteAgent,\n  postAgentBreakStatus,\n  fetchAllAgentBreaks\n} from '../utils/api';\nimport { closeLatestAgentBreak as apiCloseLatestAgentBreak } from '../utils/api';\nimport { fetchAgentsCurrentStatus as apiFetchAgentsCurrentStatus } from '../utils/api';\n\nexport default function useAgents() {\n  const [agentDetails, setAgentDetails] = useState([]);\n  const [deleteLoading, setDeleteLoading] = useState(false);\n  const [currentStatusMap, setCurrentStatusMap] = useState({});\n\n  const fetchAgentDetails = async (authToken) => {\n    const agents = await apiFetchAgentDetails(authToken);\n    setAgentDetails(agents);\n  };\n\n  const refreshAgentsCurrentStatus = async (authToken) => {\n    const map = await apiFetchAgentsCurrentStatus(authToken);\n    setCurrentStatusMap(map);\n  };\n\n  const handleAddAgent = async (formData, token, onSuccess, onError, setLoading) => {\n    setLoading(true);\n    const result = await apiHandleAddAgent(formData, token);\n    if (result.success) {\n      if (onSuccess) onSuccess();\n      fetchAgentDetails(token);\n    } else {\n      if (onError) onError(result.message);\n    }\n    setLoading(false);\n  };\n\n  const handleEditAgent = async (formData, token, onSuccess, onError, setLoading) => {\n    setLoading(true);\n    const result = await apiHandleEditAgent(formData, token);\n    if (result.success) {\n      if (onSuccess) onSuccess();\n      fetchAgentDetails(token);\n    } else {\n      if (onError) onError(result.message);\n    }\n    setLoading(false);\n  };\n\n  const handleDeleteAgent = async (agentNumber, token, onSuccess, onError) => {\n    setDeleteLoading(true);\n    const result = await apiHandleDeleteAgent(agentNumber, token);\n    if (result.success) {\n      setAgentDetails(prev => prev.filter(agent => agent.agent_number !== agentNumber));\n      if (onSuccess) onSuccess();\n    } else {\n      if (onError) onError(result.message);\n    }\n    setDeleteLoading(false);\n  };\n\n  // Save agent break/working status\n  const saveAgentBreakStatus = async (breakData, token) => {\n    return await postAgentBreakStatus(breakData, token);\n  };\n\n  // Close latest ongoing break\n  const closeLatestAgentBreak = async (agentNumber, breakEnd, token) => {\n    return await apiCloseLatestAgentBreak(agentNumber, breakEnd, token);\n  };\n\n  // Fetch all agent break/working status records (admin)\n  const getAllAgentBreaks = async (token, search = '') => {\n    return await fetchAllAgentBreaks(token, search);\n  };\n\n  return {\n    agentDetails,\n    setAgentDetails,\n    currentStatusMap,\n    refreshAgentsCurrentStatus,\n    fetchAgentDetails,\n    handleAddAgent,\n    handleEditAgent,\n    handleDeleteAgent,\n    deleteLoading,\n    setDeleteLoading,\n    saveAgentBreakStatus,\n    closeLatestAgentBreak,\n    getAllAgentBreaks\n  };\n}"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SACEC,iBAAiB,IAAIC,oBAAoB,EACzCC,cAAc,IAAIC,iBAAiB,EACnCC,eAAe,IAAIC,kBAAkB,EACrCC,iBAAiB,IAAIC,oBAAoB,EACzCC,oBAAoB,EACpBC,mBAAmB,QACd,cAAc;AACrB,SAASC,qBAAqB,IAAIC,wBAAwB,QAAQ,cAAc;AAChF,SAASC,wBAAwB,IAAIC,2BAA2B,QAAQ,cAAc;AAEtF,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAClC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACmB,aAAa,EAAEC,gBAAgB,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACqB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE5D,MAAMC,iBAAiB,GAAG,MAAOsB,SAAS,IAAK;IAC7C,MAAMC,MAAM,GAAG,MAAMtB,oBAAoB,CAACqB,SAAS,CAAC;IACpDL,eAAe,CAACM,MAAM,CAAC;EACzB,CAAC;EAED,MAAMC,0BAA0B,GAAG,MAAOF,SAAS,IAAK;IACtD,MAAMG,GAAG,GAAG,MAAMZ,2BAA2B,CAACS,SAAS,CAAC;IACxDD,mBAAmB,CAACI,GAAG,CAAC;EAC1B,CAAC;EAED,MAAMvB,cAAc,GAAG,MAAAA,CAAOwB,QAAQ,EAAEC,KAAK,EAAEC,SAAS,EAAEC,OAAO,EAAEC,UAAU,KAAK;IAChFA,UAAU,CAAC,IAAI,CAAC;IAChB,MAAMC,MAAM,GAAG,MAAM5B,iBAAiB,CAACuB,QAAQ,EAAEC,KAAK,CAAC;IACvD,IAAII,MAAM,CAACC,OAAO,EAAE;MAClB,IAAIJ,SAAS,EAAEA,SAAS,CAAC,CAAC;MAC1B5B,iBAAiB,CAAC2B,KAAK,CAAC;IAC1B,CAAC,MAAM;MACL,IAAIE,OAAO,EAAEA,OAAO,CAACE,MAAM,CAACE,OAAO,CAAC;IACtC;IACAH,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAED,MAAM1B,eAAe,GAAG,MAAAA,CAAOsB,QAAQ,EAAEC,KAAK,EAAEC,SAAS,EAAEC,OAAO,EAAEC,UAAU,KAAK;IACjFA,UAAU,CAAC,IAAI,CAAC;IAChB,MAAMC,MAAM,GAAG,MAAM1B,kBAAkB,CAACqB,QAAQ,EAAEC,KAAK,CAAC;IACxD,IAAII,MAAM,CAACC,OAAO,EAAE;MAClB,IAAIJ,SAAS,EAAEA,SAAS,CAAC,CAAC;MAC1B5B,iBAAiB,CAAC2B,KAAK,CAAC;IAC1B,CAAC,MAAM;MACL,IAAIE,OAAO,EAAEA,OAAO,CAACE,MAAM,CAACE,OAAO,CAAC;IACtC;IACAH,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAED,MAAMxB,iBAAiB,GAAG,MAAAA,CAAO4B,WAAW,EAAEP,KAAK,EAAEC,SAAS,EAAEC,OAAO,KAAK;IAC1EV,gBAAgB,CAAC,IAAI,CAAC;IACtB,MAAMY,MAAM,GAAG,MAAMxB,oBAAoB,CAAC2B,WAAW,EAAEP,KAAK,CAAC;IAC7D,IAAII,MAAM,CAACC,OAAO,EAAE;MAClBf,eAAe,CAACkB,IAAI,IAAIA,IAAI,CAACC,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,YAAY,KAAKJ,WAAW,CAAC,CAAC;MACjF,IAAIN,SAAS,EAAEA,SAAS,CAAC,CAAC;IAC5B,CAAC,MAAM;MACL,IAAIC,OAAO,EAAEA,OAAO,CAACE,MAAM,CAACE,OAAO,CAAC;IACtC;IACAd,gBAAgB,CAAC,KAAK,CAAC;EACzB,CAAC;;EAED;EACA,MAAMoB,oBAAoB,GAAG,MAAAA,CAAOC,SAAS,EAAEb,KAAK,KAAK;IACvD,OAAO,MAAMnB,oBAAoB,CAACgC,SAAS,EAAEb,KAAK,CAAC;EACrD,CAAC;;EAED;EACA,MAAMjB,qBAAqB,GAAG,MAAAA,CAAOwB,WAAW,EAAEO,QAAQ,EAAEd,KAAK,KAAK;IACpE,OAAO,MAAMhB,wBAAwB,CAACuB,WAAW,EAAEO,QAAQ,EAAEd,KAAK,CAAC;EACrE,CAAC;;EAED;EACA,MAAMe,iBAAiB,GAAG,MAAAA,CAAOf,KAAK,EAAEgB,MAAM,GAAG,EAAE,KAAK;IACtD,OAAO,MAAMlC,mBAAmB,CAACkB,KAAK,EAAEgB,MAAM,CAAC;EACjD,CAAC;EAED,OAAO;IACL3B,YAAY;IACZC,eAAe;IACfG,gBAAgB;IAChBI,0BAA0B;IAC1BxB,iBAAiB;IACjBE,cAAc;IACdE,eAAe;IACfE,iBAAiB;IACjBY,aAAa;IACbC,gBAAgB;IAChBoB,oBAAoB;IACpB7B,qBAAqB;IACrBgC;EACF,CAAC;AACH;AAAC3B,EAAA,CAjFuBD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}